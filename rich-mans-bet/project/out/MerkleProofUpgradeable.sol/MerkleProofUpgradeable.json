{"abi":[],"bytecode":{"object":"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220f895ad9a88df68c2724f3384299a989224a5965f24a17e8e860a91908df9a46364736f6c634300081c0033","sourceMap":"802:8504:159:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8504:159;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220f895ad9a88df68c2724f3384299a989224a5965f24a17e8e860a91908df9a46364736f6c634300081c0033","sourceMap":"802:8504:159:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/openzeppelin-contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":\"MerkleProofUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-ctf/=lib/forge-ctf/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/openzeppelin-contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"keccak256\":\"0x1741ea24897cdf435d3a476e9d9280b8be58a435dacb6997d54a2aa657446e5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3df04c51002939e77f1505b80d8c9802fdf6d87c508ae42ba5f2c5cc1464a90d\",\"dweb:/ipfs/QmTYDztc7Q8dEHYUcQ8TRBi6HQ6q7FgSW9QroYdNhHmaPP\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["ds-test/=lib/forge-std/lib/ds-test/src/","forge-ctf/=lib/forge-ctf/src/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/openzeppelin-contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol":"MerkleProofUpgradeable"},"evmVersion":"cancun","libraries":{}},"sources":{"src/openzeppelin-contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol":{"keccak256":"0x1741ea24897cdf435d3a476e9d9280b8be58a435dacb6997d54a2aa657446e5a","urls":["bzz-raw://3df04c51002939e77f1505b80d8c9802fdf6d87c508ae42ba5f2c5cc1464a90d","dweb:/ipfs/QmTYDztc7Q8dEHYUcQ8TRBi6HQ6q7FgSW9QroYdNhHmaPP"],"license":"MIT"}},"version":1},"id":159}